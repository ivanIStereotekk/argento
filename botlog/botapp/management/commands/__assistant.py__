import telebot
from django.core.management.base import BaseCommand
from botapp.models import TelegramUserContactModel
from datetime import date as dt
from pathlib import Path
import environ
import os
from openai import OpenAI
from dataclasses import asdict
from .utils.bot_utils import START_BUTTON_MARKUP,LEAVE_ME_CONTACT_MARKUP, callback_data
from .utils.bot_utils import DEAL_BUTTONS_MARKUP,SHARE_CONTACT_MARKUP,HANDLED_MESSAGES
from .utils.bot_utils import UserMapper,store_to_redis,retrieve_from_redis
from .utils.completion_utils import completion_tools,\
                            system_instruction, update_conversations, \
                                completion_update_response,CONVERSATION_HISTORY,\
                                    vector_store_and_batch_builder,\
                                        update_assistant_conversations,file_paths             
from redis import Redis


# dotenv
env = environ.Env(DEBUG=(bool,False))
BASE_DIR = Path(__file__).resolve().parent.parent.parent.parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# BOT - Think about: do the class with statimethods for easy usage
NOTIFY_BOT: telebot.TeleBot = telebot.TeleBot(env('BOT_NOTIFY_TOKEN'), parse_mode=None)


# redis
redis_host = env('REDIS_HOST')
redis_port = env('REDIS_PORT')


# GPT Settings
client = OpenAI(
    api_key=env('OPEN_AI_KEY'),
)

# assistant
assistant = client.beta.assistants.create(
    model="gpt-4o",
    name="Консультант по гражданским правам",
    instructions=system_instruction,
    tools=[{"type": "file_search"}],
    )

# vector store
vector_store = client.beta.vector_stores.create(name="Гражданские права")
file_paths = ["/Users/ewan/Desktop/Dev/bot-station/codes-pdf/Civil-Code-Addition-Ru.pdf","/Users/ewan/Desktop/Dev/bot-station/codes-pdf/Civil-Code-Ru.pdf"]
# file streams
file_streams = [open(path,'+rb') for path in file_paths]
file_batch = client.beta.vector_stores.file_batches.upload_and_poll(vector_store_id=vector_store.id,files=file_streams)
print(file_batch.status,"<<< STATUS")
print(file_batch.file_counts,"  : COUNTS")
assistant = client.beta.assistants.update(assistant_id=assistant.id)


# !!! Создать класс builder для того чтобы на каждую тему отвечал свой ассистент

# assistant working example
@NOTIFY_BOT.message_handler(func=lambda m: True)
def echoer(bot_message):
    """This handler responds on any text messages 
    while messages are not in HANDLED_MESSAGES list
    * assistant : gpt-4
    """
    _messages=update_assistant_conversations(message=bot_message.text,conversations=CONVERSATION_HISTORY)
    thread = client.beta.threads.create(messages=_messages,tool_resources={'file_search':{"vector_store_ids":[vector_store.id]}})
    run = client.beta.threads.runs.create_and_poll(thread_id=thread.id, assistant_id=assistant.id)
    messages = list(client.beta.threads.messages.list(thread_id=thread.id,run_id=run.id))
    message_content = messages[0].content[0].text
    annotations = message_content.annotations
    citations = []
    for index, annotation in enumerate(annotations):
        message_content.value = message_content.value.replace(annotation.text, f"[{index}]")
        if file_citation := getattr(annotation, "file_citation", None):
            cited_file = client.files.retrieve(file_citation.file_id)
            citations.append(f"[{index}] {cited_file.filename}")
    formated = f"{message_content.value} \n\n {citations}"
    NOTIFY_BOT.send_message(chat_id=bot_message.chat.id,text=formated)

    
        
        
        
class Command(BaseCommand):
    help = 'Runs Contact GPT-4 assistant on telegram Bot Base  '

    def handle(self, *args, **options):
        NOTIFY_BOT.remove_webhook()
        NOTIFY_BOT.infinity_polling()