import telebot
import environ
from pathlib import Path
from telebot.types import KeyboardButton,ReplyKeyboardMarkup
from telebot.util import quick_markup
import os
import redis
from redis import Redis
import json
from dataclasses import dataclass, field, asdict
from tiktoken import encoding_for_model
# redis
REDIS = redis.Redis(host='localhost',port=6379)

# env
env = environ.Env(DEBUG=(bool,False))
BASE_DIR = Path(__file__).resolve().parent.parent.parent.parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Telegram Bot interaction messages:

start_message = env('BOT_NOTIFY_START_MESSAGE')

leave_me_contact_message = env('BOT_NOTIFY_LEAVE_ME_CONTACT')

# Dict with callback_data and alerts that will appear on top of chat
callback_data = dict(
       passed='–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏...',
       phone='–ë–µ—Ä–µ–º –Ω–æ–º–µ—Ä...',
       telegram='–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç...',
       later='–ü–æ–∑–∂–µ...',
       video='–í—ã—Å—ã–ª–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª...',
       demo='–ì–æ—Ç–æ–≤–∏–º –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é...',
       answer='–ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...',
       faq='Frequently Asked Questions...',
       subscribe='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è...',    
       )

HANDLED_MESSAGES = ['start', 'help','contact'] 

#  [i for i in callback_data.keys()]

# markups:
START_BUTTON_MARKUP = quick_markup({'üíÅ‚Äç‚ôÇÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': {'callback_data': 'passed'}},row_width=1)
# leave me buttons
LEAVE_ME_CONTACT_MARKUP = quick_markup(
                                        {'‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':{'callback_data':'phone'},
                                        'üì≤ Telegram':{'callback_data':'telegram'},
                                        '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–∑–∂–µ': {'callback_data':'later'}
                                        },row_width=2
                                        )

DEAL_BUTTONS_MARKUP = quick_markup(
       {'üí° –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ BusinessPad':{'callback_data':'video'},
        'üì¶ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏':{'callback_data':'demo'},
        '‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã': {'callback_data':'answer'},
        'üìö –ü–æ–∫–∞–∑–∞—Ç—å FAQ':{'callback_data':'faq'},
        'üì¢ –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏, —á—Ç–æ–±—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ IT –∏ –ø—Ä–æ –±–∏–∑–Ω–µ—Å':{'callback_data':'subscribe'}
       },row_width=1,
)

# CONTACT SHARING 
SHARE_CONTACT_MARKUP = ReplyKeyboardMarkup(resize_keyboard=True)
SHARE_CONTACT_MARKUP.add(KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",request_contact=True))


# GPT settings

# tokenizer
encoding = encoding_for_model("gpt-4o")

def num_tokens_from_string(string):
    """Returns count of tokens"""
    return len(encoding.encode(string))



# REDIS ACTIONS

def store_to_redis(user_id: str, mapper: dict):
    """Storing data to Redis storage
     * -- call.from_user.id
     * any cases - User.id
    Args:
        user_id (str): message.chat.id
        mapper (dict): asdict( UserMapper() )
    """
    value = json.dumps(mapper)
    conn = redis.Redis(host='localhost', port=6379)
    conn.set(user_id,value)
    conn.expire(user_id,time=600)


def retrieve_from_redis(user_id):
    """Retrieve item from Redis 
    Args:
        chat_id (_type_): is a key
    Returns:
        _type_: python dict
    """
    conn = redis.Redis(host='localhost', port=6379, decode_responses=True)
    result = conn.get(user_id)
    if result:
        return json.loads(result)
    else:
        return False
        
    

@dataclass 
class UserMapper:
    """Temp storage item for Redis
    * key is - Message.chat.id
    * typed_username - name that typed user while asked name
    * typed telegram @username
    * gpt_init - key that shows in GPT conversation thread 
    """
    typed_username: str = field(default=None)
    gpt_init: bool = field(default=False)

    
@dataclass
class MessageMapper:
    role: str = field(default=None)
    content: str = field(default=None)



    
    
   

    
    
    
